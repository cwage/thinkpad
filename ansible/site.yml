---
- name: Provision local laptop (simple)
  hosts: localhost
  gather_facts: true
  become: false
  vars_files:
    - vars.yml
  vars:
    user_home: "{{ lookup('env','HOME') }}"

  tasks:
    - name: Add Brave keyring when brave-browser requested
      get_url:
        url: https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
        dest: /usr/share/keyrings/brave-browser-archive-keyring.gpg
        mode: "0644"
      become: true
      when: "'brave-browser' in common_packages"
      tags: [packages]

    - name: Add Brave apt repository when brave-browser requested
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"
        filename: brave-browser-release
        state: present
        update_cache: true
      become: true
      when: "'brave-browser' in common_packages"
      tags: [packages]

    - name: Install GitHub CLI apt key
      get_url:
        url: https://cli.github.com/packages/githubcli-archive-keyring.gpg
        dest: /usr/share/keyrings/githubcli-archive-keyring.gpg
        mode: "0644"
      become: true
      when: "'gh' in common_packages"
      tags: [packages, gh]

    - name: Add GitHub CLI apt repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"
        filename: github-cli
        state: present
        update_cache: true
      become: true
      when: "'gh' in common_packages"
      tags: [packages, gh]

    # Docker Engine + Compose (official Docker apt repo)
    - name: Ensure apt keyrings directory exists (Docker)
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"
      become: true
      tags: [packages, docker]

    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: "0644"
      become: true
      tags: [packages, docker]

    - name: Convert Docker key to keyring (gpg --dearmor)
      command: gpg --dearmor -o /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.asc
      args:
        creates: /etc/apt/keyrings/docker.gpg
      become: true
      tags: [packages, docker]

    - name: Add Docker apt repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release | default(ansible_facts.lsb.codename) }} stable"
        filename: docker
        state: present
        update_cache: true
      become: true
      tags: [packages, docker]

    - name: Install Docker Engine and Compose
      apt:
        name:
          - ca-certificates
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: true
      become: true
      tags: [packages, docker]

    - name: Enable and start Docker service
      service:
        name: docker
        enabled: true
        state: started
      become: true
      tags: [docker]

    - name: Add current user to docker group (no sudo for docker)
      user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: true
      become: true
      tags: [docker]

    - name: Download Signal apt key (when signal-desktop requested)
      get_url:
        url: https://updates.signal.org/desktop/apt/keys.asc
        dest: /usr/share/keyrings/signal-desktop-keyring.asc
        mode: "0644"
      become: true
      when: "'signal-desktop' in common_packages"
      tags: [packages, signal]


    - name: Convert Signal key to keyring (gpg --dearmor)
      command: gpg --dearmor -o /usr/share/keyrings/signal-desktop-keyring.gpg /usr/share/keyrings/signal-desktop-keyring.asc
      args:
        creates: /usr/share/keyrings/signal-desktop-keyring.gpg
      become: true
      when: "'signal-desktop' in common_packages"
      tags: [packages, signal]

    - name: Add Signal apt repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main"
        filename: signal-desktop
        state: present
        update_cache: true
      become: true
      when: "'signal-desktop' in common_packages"
      tags: [packages, signal]

    - name: Install packages (apt)
      apt:
        name: "{{ common_packages }}"
        state: present
        update_cache: true
      become: true
      when: common_packages | length > 0
      tags: [packages]

    - name: Ensure SSH service enabled and started (if openssh-server requested)
      service:
        name: ssh
        enabled: true
        state: started
      become: true
      when: "'openssh-server' in common_packages"
      tags: [packages]

    # Input method: install custom launcher script to avoid ibus autostart
    - name: Disable im-launch wrapper (prevents ibus autostart)
      copy:
        src: files/70im-config_launch
        dest: /etc/X11/Xsession.d/70im-config_launch
        mode: "0755"
      become: true
      tags: [xsession, input_method]

    # Xsession desktop entry for GDM to run ~/.xsession
    - name: Ensure xsessions directory exists
      file:
        path: /usr/share/xsessions
        state: directory
        mode: "0755"
      become: true
      tags: [xsession]

    - name: Install Xsession desktop entry for GDM (Xorg)
      copy:
        dest: /usr/share/xsessions/xsession.desktop
        mode: "0644"
        content: |
          [Desktop Entry]
          Name=Xsession (Xorg)
          Comment=Run /etc/X11/Xsession which sources ~/.xsession
          Exec=/etc/X11/Xsession
          TryExec=/etc/X11/Xsession
          Type=Application
          DesktopNames=X-Generic
          X-GDM-SessionType=xorg
      become: true
      tags: [xsession]

    - name: Symlink ~/.xsession from dotfiles (.thinkpad) if present
      file:
        src: "{{ user_home }}/git/cwage/dotfiles/.xsession.thinkpad"
        dest: "{{ user_home }}/.xsession"
        state: link
        force: true
        follow: false
      when: lookup('ansible.builtin.fileglob', user_home + '/git/cwage/dotfiles/.xsession.thinkpad', wantlist=False) != ''

    # ------------------------------------------------------------
    # GDM login screen privacy hardening (branding + status panel)
    # ------------------------------------------------------------
    - name: Ensure GLib resource tools are installed (for gresource compile)
      apt:
        name:
          - libglib2.0-bin      # gresource utility
          - libglib2.0-dev-bin  # glib-compile-resources
        state: present
        update_cache: true
      become: true
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    - name: Ensure dconf database directory for GDM exists
      file:
        path: /etc/dconf/db/gdm.d
        state: directory
        mode: "0755"
      become: true
      when: configure_gdm_login_screen | default(true)
      tags: [gdm, login]

    - name: Disable vendor logo on GDM login screen (dconf override)
      copy:
        dest: /etc/dconf/db/gdm.d/00-login-screen-privacy
        mode: "0644"
        content: |
          [org/gnome/login-screen]
          # Empty logo path disables vendor branding on the greeter.
          logo=''
      become: true
      when: configure_gdm_login_screen | default(true)
      notify: Rebuild dconf database (login)
      tags: [gdm, login]

    - name: Create staging directory for GDM theme override
      file:
        path: /etc/gdm3/theme-override.d
        state: directory
        mode: "0755"
      become: true
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    - name: Back up original GNOME Shell theme resource (once)
      copy:
        src: /usr/share/gnome-shell/gnome-shell-theme.gresource
        dest: /usr/share/gnome-shell/gnome-shell-theme.gresource.orig
        remote_src: true
        mode: "0644"
      become: true
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    # Extract current theme resources from the existing .gresource bundle
    - name: Ensure fresh extraction tree for theme resources
      file:
        path: /etc/gdm3/theme-override.d/src
        state: absent
      become: true
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    - name: Create extraction tree root
      file:
        path: /etc/gdm3/theme-override.d/src
        state: directory
        mode: "0755"
      become: true
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    - name: List resources from gnome-shell theme bundle
      command: gresource list /usr/share/gnome-shell/gnome-shell-theme.gresource
      register: gresource_list
      changed_when: false
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    - name: Fail if theme gresource could not be listed
      fail:
        msg: "Could not list resources in /usr/share/gnome-shell/gnome-shell-theme.gresource"
      when: gdm_hide_panel_info | default(true) and (gresource_list.stdout | default('')) == ''
      tags: [gdm, login]

    - name: Determine target CSS resource (prefer gdm.css)
      set_fact:
        theme_resources: "{{ gresource_list.stdout_lines }}"
        res_gdm_css: "{{ (gresource_list.stdout_lines | select('search', '/org/gnome/shell/theme/gdm\\.css$') | list | first | default('')) }}"
        res_shell_css: "{{ (gresource_list.stdout_lines | select('search', '/org/gnome/shell/theme/gnome-shell\\.css$') | list | first | default('')) }}"
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    - name: Choose CSS resource and fail if none
      set_fact:
        target_css_res: "{{ res_gdm_css if res_gdm_css != '' else res_shell_css }}"
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    - name: Abort when no CSS resource found in theme
      fail:
        msg: "No gdm.css or gnome-shell.css found in theme gresource; cannot apply override."
      when: gdm_hide_panel_info | default(true) and (target_css_res | default('')) == ''
      tags: [gdm, login]

    - name: Create directories for extracted resources
      file:
        path: "/etc/gdm3/theme-override.d/src/{{ (item | regex_replace('^/','')) | regex_replace('/[^/]+$','') }}"
        state: directory
        mode: "0755"
      loop: "{{ theme_resources }}"
      loop_control:
        label: "{{ item }}"
      become: true
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    - name: Extract resource files to staging
      shell: >-
        gresource extract /usr/share/gnome-shell/gnome-shell-theme.gresource "{{ item }}" 
        > "/etc/gdm3/theme-override.d/src/{{ item | regex_replace('^/','') }}"
      args:
        executable: /bin/bash
        creates: "/etc/gdm3/theme-override.d/src/{{ item | regex_replace('^/','') }}"
      loop: "{{ theme_resources }}"
      loop_control:
        label: "{{ item }}"
      become: true
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    - name: Read extracted base CSS
      slurp:
        src: "/etc/gdm3/theme-override.d/src/{{ target_css_res | regex_replace('^/','') }}"
      register: extracted_base_css
      become: true
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    - name: Append privacy override to CSS (idempotent per fresh extraction)
      copy:
        dest: "/etc/gdm3/theme-override.d/src/{{ target_css_res | regex_replace('^/','') }}"
        mode: "0644"
        content: |
          {{ extracted_base_css.content | b64decode }}

          /* --- Begin privacy override (appended) --- */
          {{ lookup('ansible.builtin.file', 'files/gdm-login/override.css') }}
          /* --- End privacy override --- */
      become: true
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    - name: Generate gresource manifest from extracted files
      template:
        src: templates/gdm-login/gnome-shell-theme.gresource.xml.j2
        dest: /etc/gdm3/theme-override.d/gnome-shell-theme.gresource.xml
        mode: "0644"
      vars:
        resource_files: "{{ theme_resources | map('regex_replace','^/','') | list }}"
      become: true
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    - name: Recompile GNOME Shell theme resource with merged CSS (from extracted tree)
      command: >-
        glib-compile-resources
        --sourcedir=/etc/gdm3/theme-override.d/src
        --target=/usr/share/gnome-shell/gnome-shell-theme.gresource
        /etc/gdm3/theme-override.d/gnome-shell-theme.gresource.xml
      become: true
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    # --- Ubuntu Yaru theme variant (used by GDM on Ubuntu) ---
    - name: Check for Ubuntu Yaru Shell theme bundle
      stat:
        path: /usr/share/gnome-shell/theme/Yaru/gnome-shell-theme.gresource
      register: yaru_bundle
      become: true
      when: gdm_hide_panel_info | default(true)
      tags: [gdm, login]

    - name: Back up original Yaru Shell theme resource (once)
      copy:
        src: /usr/share/gnome-shell/theme/Yaru/gnome-shell-theme.gresource
        dest: /usr/share/gnome-shell/theme/Yaru/gnome-shell-theme.gresource.orig
        remote_src: true
        mode: "0644"
      become: true
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: Ensure fresh extraction tree for Yaru theme resources
      file:
        path: /etc/gdm3/theme-override.d/src-yaru
        state: absent
      become: true
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: Create extraction tree root (Yaru)
      file:
        path: /etc/gdm3/theme-override.d/src-yaru
        state: directory
        mode: "0755"
      become: true
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: List resources from Yaru theme bundle
      command: gresource list /usr/share/gnome-shell/theme/Yaru/gnome-shell-theme.gresource
      register: yaru_gresource_list
      changed_when: false
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: Fail if Yaru theme gresource could not be listed
      fail:
        msg: "Could not list resources in /usr/share/gnome-shell/theme/Yaru/gnome-shell-theme.gresource"
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists and (yaru_gresource_list.stdout | default('')) == ''
      tags: [gdm, login]

    - name: Capture Yaru theme resource list
      set_fact:
        yaru_theme_resources: "{{ yaru_gresource_list.stdout_lines }}"
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: Locate Yaru gdm.css (if present)
      set_fact:
        yaru_res_gdm_css: "{{ (yaru_theme_resources | select('search', 'gdm\\.css$') | list | first | default('')) }}"
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: Locate Yaru gnome-shell.css (any variant path)
      set_fact:
        yaru_res_shell_css: "{{ (yaru_theme_resources | select('search', 'gnome-shell\\.css$') | list | first | default('')) }}"
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: Choose target CSS resource for Yaru
      set_fact:
        yaru_target_css_res: "{{ yaru_res_gdm_css if (yaru_res_gdm_css | default('')) != '' else yaru_res_shell_css }}"
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: Abort when no CSS resource found in Yaru theme
      fail:
        msg: "No gdm.css or gnome-shell.css found in Yaru theme gresource; cannot apply override."
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists and (yaru_target_css_res | default('')) == ''
      tags: [gdm, login]

    - name: Create directories for extracted Yaru resources
      file:
        path: "/etc/gdm3/theme-override.d/src-yaru/{{ (item | regex_replace('^/','')) | regex_replace('/[^/]+$','') }}"
        state: directory
        mode: "0755"
      loop: "{{ yaru_theme_resources }}"
      loop_control:
        label: "{{ item }}"
      become: true
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: Extract Yaru resource files to staging
      shell: >-
        gresource extract /usr/share/gnome-shell/theme/Yaru/gnome-shell-theme.gresource "{{ item }}" 
        > "/etc/gdm3/theme-override.d/src-yaru/{{ item | regex_replace('^/','') }}"
      args:
        executable: /bin/bash
        creates: "/etc/gdm3/theme-override.d/src-yaru/{{ item | regex_replace('^/','') }}"
      loop: "{{ yaru_theme_resources }}"
      loop_control:
        label: "{{ item }}"
      become: true
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: Read extracted Yaru base CSS
      slurp:
        src: "/etc/gdm3/theme-override.d/src-yaru/{{ yaru_target_css_res | regex_replace('^/','') }}"
      register: yaru_extracted_base_css
      become: true
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: Append privacy override to Yaru CSS
      copy:
        dest: "/etc/gdm3/theme-override.d/src-yaru/{{ yaru_target_css_res | regex_replace('^/','') }}"
        mode: "0644"
        content: |
          {{ yaru_extracted_base_css.content | b64decode }}

          /* --- Begin privacy override (appended) --- */
          {{ lookup('ansible.builtin.file', 'files/gdm-login/override.css') }}
          /* --- End privacy override --- */
      become: true
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: Generate Yaru gresource manifest from extracted files
      template:
        src: templates/gdm-login/gnome-shell-theme.gresource.xml.j2
        dest: /etc/gdm3/theme-override.d/gnome-shell-theme-yaru.gresource.xml
        mode: "0644"
      vars:
        resource_files: "{{ yaru_theme_resources | map('regex_replace','^/','') | list }}"
      become: true
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: Recompile Yaru Shell theme resource with merged CSS
      command: >-
        glib-compile-resources
        --sourcedir=/etc/gdm3/theme-override.d/src-yaru
        --target=/usr/share/gnome-shell/theme/Yaru/gnome-shell-theme.gresource
        /etc/gdm3/theme-override.d/gnome-shell-theme-yaru.gresource.xml
      become: true
      when: gdm_hide_panel_info | default(true) and yaru_bundle.stat.exists
      tags: [gdm, login]

    - name: Check for original GNOME Shell theme resource backup
      stat:
        path: /usr/share/gnome-shell/gnome-shell-theme.gresource.orig
      register: gresource_backup
      become: true
      when: not (gdm_hide_panel_info | default(true))
      tags: [gdm, login]

    - name: Restore original GNOME Shell theme resource when override disabled
      copy:
        src: /usr/share/gnome-shell/gnome-shell-theme.gresource.orig
        dest: /usr/share/gnome-shell/gnome-shell-theme.gresource
        remote_src: true
        mode: "0644"
      become: true
      when: not (gdm_hide_panel_info | default(true)) and gresource_backup.stat.exists
      tags: [gdm, login]

    - name: Check for original Yaru Shell theme resource backup
      stat:
        path: /usr/share/gnome-shell/theme/Yaru/gnome-shell-theme.gresource.orig
      register: yaru_gresource_backup
      become: true
      when: not (gdm_hide_panel_info | default(true))
      tags: [gdm, login]

    - name: Restore original Yaru Shell theme resource when override disabled
      copy:
        src: /usr/share/gnome-shell/theme/Yaru/gnome-shell-theme.gresource.orig
        dest: /usr/share/gnome-shell/theme/Yaru/gnome-shell-theme.gresource
        remote_src: true
        mode: "0644"
      become: true
      when: not (gdm_hide_panel_info | default(true)) and yaru_gresource_backup.stat.exists
      tags: [gdm, login]

  

    # GDM login screen hardening: disable user list, require manual username entry
    - name: Gather package facts for login manager
      package_facts:
        manager: apt
      when: configure_gdm_login_screen
      become: true
      tags: [gdm]

    - name: Ensure gdm3 is installed before configuring login screen
      assert:
        that:
          - ansible_facts.packages is defined
          - "'gdm3' in ansible_facts.packages"
        fail_msg: "configure_gdm_login_screen is true but gdm3 is not installed."
        success_msg: "gdm3 detected; configuring login screen."
      when: configure_gdm_login_screen
      tags: [gdm]

    - name: Ensure /etc/dconf/profile exists for GDM overrides
      file:
        path: /etc/dconf/profile
        state: directory
        mode: "0755"
      when: configure_gdm_login_screen
      become: true
      tags: [gdm]

    - name: Install gdm dconf profile
      copy:
        src: files/gdm-profile
        dest: /etc/dconf/profile/gdm
        owner: root
        group: root
        mode: "0644"
      when: configure_gdm_login_screen
      become: true
      tags: [gdm]
      notify: Run dconf update

    - name: Ensure /etc/dconf/db/gdm.d exists
      file:
        path: /etc/dconf/db/gdm.d
        state: directory
        mode: "0755"
      when: configure_gdm_login_screen
      become: true
      tags: [gdm]

    - name: Configure GDM login screen settings
      copy:
        src: files/gdm-login-screen
        dest: /etc/dconf/db/gdm.d/00-login-screen
        owner: root
        group: root
        mode: "0644"
      when: configure_gdm_login_screen
      become: true
      tags: [gdm]
      notify: Run dconf update


    # Awesome WM setup: install package via apt (packages) and link config from dotfiles (awesome)
    - name: Ensure ~/.config exists
      file:
        path: "{{ user_home }}/.config"
        state: directory
        mode: "0755"
      become: false
      tags: [awesome]

    - name: Symlink ~/.config/awesome from dotfiles (if present)
      file:
        src: "{{ user_home }}/git/cwage/dotfiles/.config/awesome"
        dest: "{{ user_home }}/.config/awesome"
        state: link
        force: true
        follow: false
      when: lookup('ansible.builtin.fileglob', user_home + '/git/cwage/dotfiles/.config/awesome', wantlist=False) != ''
      become: false
      tags: [awesome]

    # btop config from dotfiles
    - name: Symlink ~/.config/btop from dotfiles (if present)
      file:
        src: "{{ user_home }}/git/cwage/dotfiles/.config/btop"
        dest: "{{ user_home }}/.config/btop"
        state: link
        force: true
        follow: false
      when: lookup('ansible.builtin.fileglob', user_home + '/git/cwage/dotfiles/.config/btop', wantlist=False) != ''
      become: false
      tags: [btop]

    - name: Symlink ~/.config/udiskie from dotfiles (if present)
      file:
        src: "{{ user_home }}/git/cwage/dotfiles/.config/udiskie"
        dest: "{{ user_home }}/.config/udiskie"
        state: link
        force: true
        follow: false
      when: lookup('ansible.builtin.fileglob', user_home + '/git/cwage/dotfiles/.config/udiskie', wantlist=False) != ''
      become: false
      tags: [udiskie]

    - name: Symlink ~/.config/dunst from dotfiles (if present)
      file:
        src: "{{ user_home }}/git/cwage/dotfiles/.config/dunst"
        dest: "{{ user_home }}/.config/dunst"
        state: link
        force: true
        follow: false
      when: lookup('ansible.builtin.fileglob', user_home + '/git/cwage/dotfiles/.config/dunst', wantlist=False) != ''
      become: false
      tags: [dunst]

    - name: Symlink ~/.Xresources from dotfiles (.thinkpad) if present
      file:
        src: "{{ user_home }}/git/cwage/dotfiles/.Xresources.thinkpad"
        dest: "{{ user_home }}/.Xresources"
        state: link
        force: true
        follow: false
      when: lookup('ansible.builtin.fileglob', user_home + '/git/cwage/dotfiles/.Xresources.thinkpad', wantlist=False) != ''
      become: false
      tags: [xresources]

    # General dotfile symlinks (safe set, excludes ~/.git and ~/.gnupg)
    - name: Symlink common dotfiles from repo (if present)
      file:
        src: "{{ user_home }}/git/cwage/dotfiles/{{ item }}"
        dest: "{{ user_home }}/{{ item }}"
        state: link
        force: true
        follow: false
      loop:
        - .bash_profile
        - .bashrc
        - .dir_colors
        - .fonts
        - .gitconfig
        - .gitignore
        - .screenrc
        - .tmux.conf
        - .vim
        - .vimrc
      when: lookup('ansible.builtin.fileglob', user_home + '/git/cwage/dotfiles/' + item, wantlist=False) != ''
      become: false
      tags: [dotlinks]

    # SSH config: keep keys local, link only config.d if present
    - name: Ensure ~/.ssh exists with safe permissions
      file:
        path: "{{ user_home }}/.ssh"
        state: directory
        mode: "0700"
      become: false
      tags: [dotlinks]

    - name: Symlink ~/.ssh/config.d from dotfiles (if present)
      file:
        src: "{{ user_home }}/git/cwage/dotfiles/.ssh/config.d"
        dest: "{{ user_home }}/.ssh/config.d"
        state: link
        force: true
        follow: false
      when: lookup('ansible.builtin.fileglob', user_home + '/git/cwage/dotfiles/.ssh/config.d', wantlist=False) != ''
      become: false
      tags: [dotlinks]

    # Spacemacs setup: clone Spacemacs and link ~/.spacemacs from dotfiles
    - name: Check if ~/.emacs.d exists
      stat:
        path: "{{ user_home }}/.emacs.d"
      register: emacsd
      become: false
      tags: [emacs, spacemacs]

    - name: Clone Spacemacs into ~/.emacs.d (branch {{ spacemacs_branch }})
      git:
        repo: https://github.com/syl20bnr/spacemacs.git
        dest: "{{ user_home }}/.emacs.d"
        version: "{{ spacemacs_branch }}"
        update: no
      when: not emacsd.stat.exists
      become: false
      tags: [emacs, spacemacs]

    - name: Symlink ~/.spacemacs from dotfiles (if present)
      file:
        src: "{{ user_home }}/git/cwage/dotfiles/.spacemacs"
        dest: "{{ user_home }}/.spacemacs"
        state: link
        force: true
        follow: false
      when: lookup('ansible.builtin.fileglob', user_home + '/git/cwage/dotfiles/.spacemacs', wantlist=False) != ''
      become: false
      tags: [emacs, spacemacs]

    # rbenv (user-scoped install to match ~/.bashrc expectations)
    - name: Check if rbenv is installed in ~/.rbenv
      stat:
        path: "{{ user_home }}/.rbenv/bin/rbenv"
      register: rbenv_bin
      become: false
      tags: [rbenv]

    # Volta + Node (user-scoped)
    - name: Check for Volta (~/.volta/bin/volta)
      stat:
        path: "{{ user_home }}/.volta/bin/volta"
      register: volta_bin
      become: false
      tags: [node, volta]

    - name: Install Volta (skip profile setup)
      shell: "curl -fsSL https://get.volta.sh | bash -s -- --skip-setup"
      args:
        executable: /bin/bash
      environment:
        HOME: "{{ user_home }}"
      when: not volta_bin.stat.exists
      become: false
      tags: [node, volta]

    - name: Ensure Node LTS via Volta
      shell: "{{ user_home }}/.volta/bin/volta install node@lts"
      environment:
        HOME: "{{ user_home }}"
        PATH: "{{ user_home }}/.volta/bin:{{ ansible_env.PATH }}"
      become: false
      tags: [node]

    - name: Install global npm packages (if any)
      shell: "npm install -g {{ item }}"
      loop: "{{ npm_global_packages }}"
      environment:
        HOME: "{{ user_home }}"
        PATH: "{{ user_home }}/.volta/bin:{{ ansible_env.PATH }}"
      when: npm_global_packages | length > 0
      become: false
      tags: [node]

    - name: Install rbenv into ~/.rbenv
      git:
        repo: https://github.com/rbenv/rbenv.git
        dest: "{{ user_home }}/.rbenv"
        version: master
        update: no
      when: not rbenv_bin.stat.exists
      become: false
      tags: [rbenv]

    - name: Ensure rbenv plugins dir exists
      file:
        path: "{{ user_home }}/.rbenv/plugins"
        state: directory
        mode: "0755"
      when: rbenv_bin.stat.exists or (lookup('ansible.builtin.fileglob', user_home + '/.rbenv', wantlist=False) != '')
      become: false
      tags: [rbenv]

    - name: Install ruby-build as rbenv plugin
      git:
        repo: https://github.com/rbenv/ruby-build.git
        dest: "{{ user_home }}/.rbenv/plugins/ruby-build"
        version: master
        update: no
      when: lookup('ansible.builtin.fileglob', user_home + '/.rbenv', wantlist=False) != ''
      become: false
      tags: [rbenv]

  handlers:
    - name: Run dconf update
      ansible.builtin.command: dconf update
      become: true
      changed_when: false
    - name: Rebuild dconf database (login)
      command: dconf update
      become: true
      listen: Rebuild dconf database (login)
